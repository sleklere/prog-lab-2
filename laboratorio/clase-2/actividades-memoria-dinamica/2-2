#include <iostream>
#include <cstdlib>
#include <ctime>
using namespace std;

void ini0(int *vec, int tam)
{
  for (int i = 0; i < tam; i++)
  {
    vec[i] = 0;
  }
}

void mostrarVector(int *vec, int tam)
{
  for (int i = 0; i < tam; i++)
  {
    cout << i << ": " << vec[i] << endl;
  }
}

int buscarPosMaximo(int *vec, int tam)
{
  int pos, max = 0;

  for (int i = 0; i < tam; i++)
  {
    if (vec[i] > max)
    {
      pos = i;
      max = vec[i];
    }
  }

  return pos;
}

int buscarCantMaximos(int *numeros, int *repeticiones, int tam, int posMax)
{
  int cantidad = 1; // como quiero saber si hay mas de un numero con el mayor numero de repeticiones, ya arranco contando el primer max encontrado

  for (int i = 0; i < tam; i++)
  {
    // si el numero repetido evaluado no es el mismo que el maximo encontrado en buscarPosMaximo se pasa a evaluar si se repetio la misma cantidad de veces
    cout << "numeros[i]: " << numeros[i] << endl;

    if (numeros[i] != numeros[posMax])
    {
      cout << "repeticiones[i]: " << repeticiones[i] << endl;
      cout << "repeticiones[posMax]: " << repeticiones[posMax] << endl;
      if (repeticiones[i] == repeticiones[posMax])
      {

        cantidad += repeticiones[i] / repeticiones[i]; // tener en cuenta que se va a volver a iterar por el mismo numero
      }
    }
  }

  return cantidad;
}

int main()
{
  int n, *vec, *nRep;

  cout << "Ingrese un numero: ";
  cin >> n;

  // generar vector dinamico
  vec = new int[n];
  if (vec == NULL || nRep == NULL)
  {
    return 1;
  }

  srand((int)time(0));
  // numeros random entre 1 y N
  for (int i = 0; i < n; i++)
  {
    vec[i] = rand() % 10 + 1;
  }

  ////////////
  // ASESS
  ////////////

  int cantNumRep = 0;
  int **viejaMatriz = nullptr;

  for (int i = 0; i < n; i++)
  {
    int repeticiones = 0;
    bool repetidoEncontrado = 0;

    for (int j = 0, j < n; j++)
    {
      if (vec[i] == vec[j])
      { // hay un numero repetido
        repeticiones += 1;
      }
    }

    if (repeticiones > 0)
    {
      cantNumRep += 1;

      // crear nuevo array de mayor tamaño
      int **nuevaMatriz = new int[cantNumRep][2];

      // llenar con los datos correspondientes
      nuevaMatriz[cantNumRep - 1][0] = vec[i];
      nuevaMatriz[cantNumRep - 1][1] = repeticiones;
    }
  }

  ///////////
  // OUTPUT
  ///////////

  cout << "Los numeros repetidos son: ";
  for (int i = 0; i < n; i++)
  {
    if (nRep[i] == nRep[posNumMayRep] && vec[i] != vec[posNumMayRep])
    {
      cout << vec[i] << ", ";
    }
  }
  cout << vec[posNumMayRep] << "." << endl;

  cout << "El numero con mayores repeticiones es: " << vec[posNumMayRep] << " (" << nRep[posNumMayRep] << " repeticiones)" << endl;
  // cout << "El numero con mayores repeticiones es: " << vec[posNumMayRep] << endl;

  delete[] vec;
  delete[] nRep;

  return 0;
}

// crear vector con numeros al azar
// buscar cantidad de numeros repetidos y crear matriz de ese tamaño REPETIDOS[POSICION][CANTIDAD]
// volver a iterar e ir guardando en la matriz su posicion y la cantidad de repeticiones
// iterar la matriz y buscar el numero con mayores repeticiones
// volver a iterar y contar cuantos numeros con esas repeticiones hay. luego crear matriz de filas = cant num con esas repeticiones